# Make all inlet and outlet as transfinite lines

from os import write
import numpy as np
import matplotlib.pyplot as plt
import math

# Define bump parameters
delta = np.pi / 28
K = 1.3
c = 0
yp = 0

# Define the function for the top boundary
def f_top(x):
    return np.sqrt(((x**2 * (np.tan(delta))**2) + c) / (1 / np.cos(np.arctan(yp / K)))**2) * np.sin(x) * np.sin((yp + np.pi) / 2)

# Discretize the function into points
N_points_bump = 50 # Number of points for bump
x_vals = np.linspace(0, np.pi, N_points_bump)
y_vals_top = f_top(x_vals)

# Define the starting point of the new line

Delta_x = 0     # Distance in terms of discretization points from the maximum of the bump
Delta_conv = 1  # Distance in terms of discretization points from the start of the inner part of conv. to outer
y_dist = 3      # multiplication factor that increases distance between max of bump and initial point of inner convergent
thick_conv = 0.02 # Additive quantity to the end point of the convergent to close it
thick_conv2 = 0.2 * thick_conv
angle_deg = -5  # Angle of the convergent, taken from Web Plot Digitizer from image of the thesis of sweden guy
index_line_bump = np.argmax(y_vals_top) + Delta_x
x_start, y_start = x_vals[index_line_bump], y_dist * max(y_vals_top)

x_start_up, y_start_up = x_vals[index_line_bump], (y_dist * max(y_vals_top)) + thick_conv
angle_rad = np.radians(angle_deg)

x_start_conv = x_vals[index_line_bump - 1]
y_start_conv = y_start_up - (x_start - x_start_conv)*np.tan(angle_rad)


# Define the length of the line segment
End_line_param = 4
line_length = End_line_param - x_start
x_end = x_start + line_length * np.cos(angle_rad)
y_end = y_start + line_length * np.sin(angle_rad)

x_end_up = x_end
y_end_up = y_start_up + line_length * np.sin(angle_rad)

# Define Far Field
Y_DIST = 150 # Multiplication factor of maximum of bump to create far field Y
Y_END = Y_DIST * y_vals_top[np.argmax(y_vals_top)]
X_DIST = -10 # Multiplication factor of end x point of bump to create far field X
X_START = X_DIST * x_vals[np.argmax(x_vals)]
X_END = x_end


size_bl = 0.00001
n_bl = 65 # Number of layers
r = 1.1   # Growth ratio

# Compute the total boundary layer thickness
thick_bl = size_bl * (r**n_bl - 1) / (r - 1)

thick_FF = thick_bl + 1

# .geo file creation:
with open("Bumpconv.geo", "w") as file:

    file.write("SetFactory('OpenCASCADE');\n")

    file.write(f"SIZE_BL= {size_bl};\n")
    file.write(f"THICK_BL= {thick_bl};\n")

    file.write("h = 0.01;\n")           # Size of cells close to bump and convergent
    file.write("H = 1;\n")              # Size of cells close to farfield
    file.write(f"H_BL = {thick_bl};\n") # Size of geometrical step of structured mesh


    # Write points for the bump
    for i, (x, y) in enumerate(zip(x_vals, y_vals_top)):
      file.write(f"Point({i + 1}) = {{{x}, {y}, 0, h}};\n")


    # Boundary points for the entire domain (OLD)
    # boundary_point_1 = center_convergent + 1
    # boundary_point_2 = boundary_point_1 + 1
    # boundary_point_3 = boundary_point_2 + 1
    # boundary_point_4 = boundary_point_3 + 1
    # boundary_point_5 = boundary_point_4 + 1
    # boundary_point_6 = boundary_point_5 + 1
    # boundary_point_7 = boundary_point_6 + 1
    # boundary_point_8 = boundary_point_7 + 1

    # Boundary points for the entire domain 
    boundary_point_1 = len(x_vals) + 1 # 51
    boundary_point_2 = boundary_point_1 + 1
    boundary_point_3 = boundary_point_2 + 1

    boundary_point_4 = boundary_point_3 + 8 # 61
    boundary_point_5 = boundary_point_4 + 1
    boundary_point_6 = boundary_point_5 + 1
    boundary_point_7 = boundary_point_6 + 1
    boundary_point_8 = boundary_point_7 + 1

    # boundary_point_9 = boundary_point_8 + 1  # 67 non existent
    # boundary_point_10 = boundary_point_9 + 1 # 68

    file.write(f"Point({boundary_point_1}) = {{{x_end}, 0, 0, h}};\n")
    file.write(f"Point({boundary_point_2}) = {{{X_END}, {thick_bl}, 0, h}};\n") # thick_bl
    file.write(f"Point({boundary_point_3}) = {{{X_END}, {y_end - thick_bl}, 0, h}};\n") # thick_bl


    # file.write(f"Point({boundary_point_10}) = {{{0}, {thick_bl}, 0, h}};\n") # ????

    # Define points for the new line with -5° slope and the upper parallel line (OLD)
    #new_point_start = len(x_vals) + 1 
    #new_point_end = new_point_start + 1
    #upper_point_start = new_point_end + 1
    #upper_point_end = upper_point_start + 1
    #upper_conv = upper_point_end + 1
    #lower_conv = upper_conv + 1
    #circle_centre = lower_conv + 1
    #center_convergent = circle_centre + 1

    # Define points for the new line with -5° slope and the upper parallel line
    new_point_end = boundary_point_3 + 1 # 54
    new_point_start = new_point_end + 1
    lower_conv = new_point_start + 1
    center_convergent = lower_conv + 1
    upper_conv = center_convergent + 1
    upper_point_start = upper_conv + 1
    upper_point_end = upper_point_start + 1 # 60


    # Calculations for point positions
    y_upper_conv = y_start_conv - thick_conv2
    y_lower_conv = y_start_conv + thick_conv2 - thick_conv

    # Computation of the radius of the circle of the convergent intake, given the center position and two points
    hhh = x_start_conv + (x_start_up - x_start_conv)/200      #float(input("Inserisci la coordinata x del centro (h): "))
    kkk = (y_upper_conv + y_lower_conv)/2      #float(input("Inserisci la coordinata y del centro (k): "))
    xxx1 = x_start_conv     #float(input("Inserisci la coordinata x del punto sulla circonferenza: "))
    yyy1 = y_upper_conv     #float(input("Inserisci la coordinata y del punto sulla circonferenza: "))
    raggio1 = math.sqrt((xxx1 - hhh)**2 + (yyy1 - kkk)**2)
    front_nose = raggio1

    # Computation of the radius of the circle of the convergent intake B.L., given the center position and two points
    hhh2 = x_start_conv + (x_start_up - x_start_conv)/200      #float(input("Inserisci la coordinata x del centro (h): "))
    kkk2 = (y_upper_conv + y_lower_conv)/2      #float(input("Inserisci la coordinata y del centro (k): "))
    xxx2 = x_start_conv     #float(input("Inserisci la coordinata x del punto sulla circonferenza: "))
    yyy2 = y_upper_conv + thick_bl    #float(input("Inserisci la coordinata y del punto sulla circonferenza: "))
    raggio2 = math.sqrt((xxx2 - hhh2)**2 + (yyy2 - kkk2)**2)
    front_nose_BL = raggio2


    # Write the convergent shape points
    file.write(f"Point({new_point_end}) = {{{x_end}, {y_end}, 0, h}};\n") # 52
    file.write(f"Point({new_point_start}) = {{{x_start}, {y_start}, 0, h}};\n") # 55
    file.write(f"Point({lower_conv}) = {{{x_start_conv}, {y_lower_conv}, 0, h}};\n")

    file.write(f"Point({center_convergent}) = {{{x_start_conv + (x_start_up - x_start_conv)/200 - front_nose}, {(y_upper_conv + y_lower_conv)/2}, 0, h}};\n")
    file.write(f"Point({upper_conv}) = {{{x_start_conv}, {y_upper_conv}, 0, h}};\n")
    file.write(f"Point({upper_point_start}) = {{{x_start_up}, {y_start_up}, 0, h}};\n")
    file.write(f"Point({upper_point_end}) = {{{x_end_up}, {y_end_up}, 0, h}};\n")

    file.write(f"Point({boundary_point_4}) = {{{X_END}, {y_end_up + thick_bl}, 0, h}};\n") # thick_bl
    file.write(f"Point({boundary_point_5}) = {{{X_END}, {Y_END}, 0, H}};\n")
    file.write(f"Point({boundary_point_6}) = {{{X_START}, {Y_END}, 0, H}};\n")
    file.write(f"Point({boundary_point_7}) = {{{X_START}, {thick_bl}, 0, h}};\n") # thick_bl
    file.write(f"Point({boundary_point_8}) = {{{X_START}, 0, 0, H/4}};\n")

    # Points for the B.L. of the convergent intake (OLD)
    #BL_conv_1 = boundary_point_10 + 1 #69
    #BL_conv_2 = BL_conv_1 + 1
    #BL_conv_3 = BL_conv_2 + 1
    #BL_conv_4 = BL_conv_3 + 1
    #BL_conv_5 = BL_conv_4 + 1
    #BL_conv_6 = BL_conv_5 + 1
    #BL_conv_7 = BL_conv_6 + 1

    # BL_conv_1 = boundary_point_8 + 1 #66 # overlapping with 61

    BL_conv_2 = boundary_point_8 + 1
    BL_conv_3 = BL_conv_2 + 1
    BL_conv_4 = BL_conv_3 + 1
    BL_conv_5 = BL_conv_4 + 1

    # BL_conv_6 = BL_conv_5 + 1 #71 # overlapping with 53

    BL_conv_7 = BL_conv_5 + 1


    #file.write(f"Point({BL_conv_1}) = {{{x_end_up}, {y_end_up + thick_bl}, 0, h}};\n")
    file.write(f"Point({BL_conv_2}) = {{{x_start}, {y_start - thick_bl}, 0, h}};\n")
    file.write(f"Point({BL_conv_3}) = {{{x_start_conv}, {y_lower_conv - thick_bl}, 0, h}};\n")
    file.write(f"Point({BL_conv_4}) = {{{x_start_conv + (x_start_up - x_start_conv)/200 - front_nose_BL}, {(y_upper_conv + y_lower_conv)/2}, 0, h}};\n")
    file.write(f"Point({BL_conv_5}) = {{{x_start_conv}, {y_upper_conv + thick_bl}, 0, h}};\n")
    file.write(f"Point({BL_conv_7}) = {{{x_start_up}, {y_start_up + thick_bl}, 0, h}};\n")

    circle_centre = BL_conv_7 + 1
    file.write(f"Point({circle_centre}) = {{{x_start_conv + (x_start_up - x_start_conv)/200}, {(y_upper_conv + y_lower_conv)/2}, 0, h}};\n")



    #file.write(f"Point({BL_conv_6}) = {{{x_end}, {y_end - thick_bl}, 0, h}};\n")

    # LINES

    # Define spline from the first point to the maximum
    file.write(f"Spline(1) = {{{', '.join(str(i + 1) for i in range(np.argmax(y_vals_top) + 1))}}};\n")

    # Define spline from the maximum to the end
    file.write(f"Spline(2) = {{{', '.join(str(i + 1) for i in range(np.argmax(y_vals_top), len(x_vals)))}")
    file.write("};\n")

    # Boundary lines
    file.write(f"Line({3}) = {{{50}, {boundary_point_1}}};\n")
    file.write(f"Line({4}) = {{{boundary_point_1}, {boundary_point_2}}};\n")
    file.write(f"Line({5}) = {{{boundary_point_2}, {boundary_point_3}}};\n")
    file.write(f"Line({6}) = {{{boundary_point_3}, {new_point_end}}};\n")
    file.write(f"Line({7}) = {{{new_point_end}, {upper_point_end}}};\n")
    file.write(f"Line({8}) = {{{upper_point_end}, {boundary_point_4}}};\n")
    file.write(f"Line({9}) = {{{boundary_point_4}, {boundary_point_5}}};\n")
    file.write(f"Line({10}) = {{{boundary_point_5}, {boundary_point_6}}};\n")
    file.write(f"Line({11}) = {{{boundary_point_6}, {boundary_point_7}}};\n")
    file.write(f"Line({12}) = {{{boundary_point_7}, {boundary_point_8}}};\n")
    file.write(f"Line({13}) = {{{boundary_point_8}, {1}}};\n") # Connect back to start of bump

    # Convergent lines (without boundary one - line 6)
    file.write(f"Line({14}) = {{{upper_point_end}, {upper_point_start}}};\n")
    file.write(f"Line({15}) = {{{upper_point_start}, {upper_conv}}};\n")
    file.write(f"Circle({16}) = {{{upper_conv}, {circle_centre}, {center_convergent}}};\n")  # Upper semi-circle definition (start point, centre point, end point)
    file.write(f"Circle({17}) = {{{center_convergent}, {circle_centre}, {lower_conv}}};\n")  # Lower semi-circle definition (start point, centre point, end point)
    file.write(f"Line({18}) = {{{lower_conv}, {new_point_start}}};\n")
    file.write(f"Line({19}) = {{{new_point_start}, {new_point_end}}};\n")

    # Define lines for the B.L. in the convergent intake (anti-clockwise) (without boundary ones - lines 5,6,7)
    file.write(f"Line({20}) = {{{boundary_point_4}, {BL_conv_7}}};\n")
    file.write(f"Line({21}) = {{{BL_conv_7}, {BL_conv_5}}};\n")
    file.write(f"Circle({22}) = {{{BL_conv_5}, {circle_centre}, {BL_conv_4}}};\n")
    file.write(f"Circle({23}) = {{{BL_conv_4}, {circle_centre}, {BL_conv_3}}};\n")
    file.write(f"Line({24}) = {{{BL_conv_3}, {BL_conv_2}}};\n")
    file.write(f"Line({25}) = {{{BL_conv_2}, {boundary_point_3}}};\n")

    # UNKNOWN LINES
    # file.write(f"Line({35}) = {{{upper_point_end}, {BL_conv_1}}};\n")  # vertical line in the B.L. extremis
    # file.write(f"Line({36}) = {{{BL_conv_2}, {upper_point_start}}};\n")  # vertical line in the B.L. extremis
    # file.write(f"Line({37}) = {{{BL_conv_3}, {upper_conv}}};\n")  # vertical line in the B.L. extremis
    # file.write(f"Line({38}) = {{{lower_conv}, {BL_conv_4}}};\n")  # vertical line in the B.L. extremis
    # file.write(f"Line({39}) = {{{BL_conv_5}, {new_point_start}}};\n")  # vertical line in the B.L. extremis
    # file.write(f"Line({40}) = {{{BL_conv_6}, {new_point_end}}};\n")  # vertical line in the B.L. extremis

    # file.write(f"Line({42}) = {{{BL_conv_7}, {center_convergent}}};\n")  # vertical line in the B.L. extremis

    # file.write(f"Line({15}) = {{{new_point_start - 1},{boundary_point_1} }};\n")
    # file.write(f"Line({20}) = {{{1},{boundary_point_10}}};\n")
    # file.write(f"Line({21}) = {{{boundary_point_10},{boundary_point_5}}};\n")



    # Transfinite lines definition
    file.write(f"Transfinite Line{{{4}}} = {n_bl} Using Progression {r};\n")
    file.write(f"Transfinite Line{{{10}}} = {n_bl} Using Progression {1/r};\n") # andrà r
    file.write(f"Transfinite Line{{{6}}} = {n_bl} Using Progression {1/r};\n")
    file.write(f"Transfinite Line{{{8}}} = {n_bl} Using Progression {r};\n")
    file.write(f"Transfinite Line{{{5}}} = {150} Using Progression {1};\n")
    file.write(f"Transfinite Line{{{17}}} = {10} Using Progression {1};\n")
    #file.write(f"Transfinite Line{{{len(x_vals) + 10}}} = {150} Using Progression {1/r};\n")
    #file.write(f"Transfinite Line{{{len(x_vals) + 12}}} = {150} Using Progression {1};\n")
    file.write(f"Transfinite Line{{{3}}} = {150} Using Progression {1};\n")
    file.write(f"Transfinite Line{{{16}}} = {10} Using Progression {1};\n")
    file.write(f"Transfinite Line{{{9}}} = {150} Using Progression {r};\n")

    file.write(f"Transfinite Line{{{13}}} = {300} Using Progression {1};\n")

    #file.write(f"Transfinite Line{{{19}}} = {150} Using Progression {1/r};\n")

    #file.write(f"Transfinite Line{{{20}}} = {n_bl} Using Progression {r};\n") # old point 68 still undefined for my code
    #file.write(f"Transfinite Line{{{21}}} = {300} Using Progression {1};\n") # same here 


    from google.colab import files
    files.download("Bumpconv.geo")
